#!/usr/bin/env ruby

require './room'
require './item'
require './colors'

require "readline"

def prompt _prompt="", newline=false
	_prompt += "\n" if newline
	inText = Readline.readline(_prompt, true).squeeze(" ").strip
	inText
end

def goto_room direction
	if $current_room.paths.has_key?(direction.to_sym)
		$current_room = $current_room.paths[direction.to_sym]
		$current_room.enter
	else
		puts "You can't go that way"
	end 
end


rooms = {	
	remote_island: Room.new("Remote Island", "There is plane reckage all over."),
	remote_island_w: Room.new("Remote Island West", "Just more reckage and scrap metal. Half of the plane you crashed in is to the West. You can also go East to where you landed."),
	front_half_of_plane: Room.new("Front half of plane", "The light is dim, but you can still see. There are rows of chairs on each side of you, and the cockpit is North West", { backpack: Item.new("Backpack", "Not much here... just a backpack", 2, true) })
	# cockpit: Room.new("Plane cockpit", "", { radio: Item.new("Radio", "", ) })
}

rooms[:remote_island].set_paths({ w: rooms[:remote_island_w] })
rooms[:remote_island_w].set_paths({ e: rooms[:remote_island], w: rooms[:front_half_of_plane] })
rooms[:front_half_of_plane].set_paths({ e: rooms[:remote_island_w] }) # add cockpit

inventory = {}
weight = 0

$current_room = rooms[:remote_island]
puts "You were on a plane, and just crashed. You landed on a remote island and don't know where you are."
puts
$current_room.enter

while true
	input = prompt(">").split
	cmd_exists = false
	case input[0]
	when "get", "take"
		item = input[1]
		if $current_room.item_exists item
			max_weight = 15 # Its very likely I'll change these values as more items are added to the game
			max_weight += 30 if inventory.has_key? :backback
			item_weight = $current_room.get_item(item).weight
			if weight + item_weight <= max_weight
				weight += item_weight
				inventory[:item] = $current_room.get_item(item)
				$current_room.remove_item item
			else
				puts "Carrying this item would make your load too heavy"
			end
		else
			puts "That item is not in here, or can't be taken."
		end
	when "look"
		if input[1]
			# same as examine
		else
			$current_room.look
		end
    when "examine", "exam" # not working, also for thing like "examine chairs" even if chairs cant be taken
    	item = input[1]
		puts inventory[item.to_sym].examine
	when "n", "s", "e", "w", "ne", "nw", "sw", "se", "d", "u"
		goto_room input[0]
	when "i", "inv", "inventory"
		inventory.each { |k, v|
			puts v.name
		}
	when "drop" # not working
		item = input[1]
		weight -= $inventory[item.to_sym].weight
		$current_room.add_item inventory[item.to_sym]
		inventory[item.to_sym].remove_item
	when "help"
		puts "Some basic commands to get you started: n, e, s, w, ne, nw, se, sw".magenta
		puts "Those are directions if you didn't understand what any of dat means.".magenta
		puts "Many commands can be abbreviated or used by typing their first letter.".magenta
	when "quit"
		exit
	else
		puts "Unkown command"
	end
end
