#!/usr/bin/env ruby

require './require/room'
require './require/item'
require './require/colors'

require "readline"

def find_item i # dont use yet
	i.slice!(0)
	i = i.join(" ")
	case i
	when "leaf"
		"leaves"
	when "broken glass"
		"glass"
	when "small radio"
		"radio"
	when "under chairs", "under rows", "under rows of chairs"
		"chairs"
	else
		i
	end
end

def prompt _prompt="", newline=false
	_prompt += "\n" if newline
	inText = Readline.readline(_prompt, true).squeeze(" ").strip
	inText
end

def goto_room direction
	if $current_room.paths.has_key?(direction.to_sym)
		$current_room.leave
		$current_room = $current_room.paths[direction.to_sym]
		$current_room.enter
	else
		puts "You can't go that way"
	end
end


rooms = {	
	remote_island: Room.new("Remote Island", "There is plane reckage all over. The beach continues East and West. To the north is a jungle."),
	remote_island_w: Room.new("Remote Island West", "Just more reckage and scrap metal. Half of the plane you crashed in is to the West. You can also go East to where you landed."),
	remote_island_e: Room.new("Remote Island East", "Lots of sand. There is a large rock with some writing on it...  The ocean is to the North. You can go back to the crash site if you go West. "),
	jungle: Room.new("Jungle", "Everything is very green. The trees have large tropical leaves. You think this could mean you are near the equator. The jungle continues North, or you can go back south.", { 
		leaves: Item.new("Leaves", "These are very thick and big leaves... I wonder wonder what you could make with this...", 2, true, {}, false) }),
	jungle_n: Room.new("Jungle North", "You are still in the jungle. You hear something moving in the trees. You can't see what it is, but it sounds dangerous. The path goes West, and you can go back South.", {}, { # add whatever will be west of this
		bear_alive: true }),
	jungle_nw: Room.new("Jungle Northwest", "The Northwest side of the jungle. You can go up a mountian to the North, or you can go back East."), # add mountian
	mountian: Room.new("Bottom of Mountian", "You are on bottom of a mountian. There is lots of grass, and a dense jungle around you. You can go South, to the forest, or North to continue up the mountian."),
	front_half_of_plane: Room.new("Front half of plane", "The light is dim, but you can still see. There are rows of chairs on each side of you, and the cockpit is North West.", {
		backpack: Item.new("Backpack", "This will allow you to carry more stuff.", 4, true, {}, true) }),
	cockpit: Room.new("Plane cockpit", "You are in the plane cockpit. The wind shield is shattered, so it is a little dangerous to walk. There is a small radio that the captain left and some pennies on the ground.", {
		radio: Item.new("Radio", "Manufactured by INOVA Electronics. It is in good condition, but seems to have no batteries", 3, false, { power: false }, true),
		pennies: Item.new("pennies", "Manufactured in 1993. They are copper coated zinc US pennies.", 1, true, {}, true), # pennies will be used to make batteries for radio
		glass: Item.new("Glass", "Ouch, very sharp...", 2, true, {}, true) })

}

rooms[:remote_island].set_paths({ n: rooms[:jungle], e: rooms[:remote_island_e], w: rooms[:remote_island_w] })
rooms[:remote_island_e].set_paths({ w: rooms[:remote_island] })
rooms[:remote_island_w].set_paths({ e: rooms[:remote_island], w: rooms[:front_half_of_plane] })
rooms[:front_half_of_plane].set_paths({ e: rooms[:remote_island_w], nw: rooms[:cockpit] })
rooms[:cockpit].set_paths({ se: rooms[:front_half_of_plane] })
rooms[:jungle].set_paths({n: rooms[:jungle_n], s: rooms[:remote_island] })
rooms[:jungle_n].set_paths({s: rooms[:jungle], w: rooms[:jungle_nw]})
rooms[:jungle_nw].set_paths({n: rooms[:mountian], e: rooms[:jungle_n]})
rooms[:mountian].set_paths({s: rooms[:jungle_nw]})


rooms[:front_half_of_plane].set_hidden_room(Room.new("Chairs", "Its pretty dirty under these chairs, lots of trash."))
rooms[:remote_island_e].set_hidden_room(Room.new("Rock", "You can't quite make it out... but it looks like a map..."))
rooms[:jungle_n].set_hidden_room(Room.new("Trees", "It looks like theirs a bear behind those bushes."))


# batteries: Item.new("Batteries", "Good for powering things.", 1)
# this'll need to be somewhere, made with pennies and stuff

inventory = { }
weight = 0


$current_room = rooms[:remote_island]
puts "You were on a plane, and just crashed. You landed on a remote island and don't know where you are."
puts
$current_room.enter

while true
	input = prompt(">").split
	cmd_exists = false
	case input[0]
	when "get", "take"
		if input[1]
			item = input[1]
			if $current_room.item_exists item
				max_weight = 15 # Its very likely I'll change these values as more items are added to the game
				max_weight += 30 if inventory.has_key? :backback
				item_weight = $current_room.get_item(item).weight
				if weight + item_weight <= max_weight
					weight += item_weight
					inventory[item.to_sym] = $current_room.get_item(item)
					$current_room.remove_item item
					puts "You picked up #{item}!".magenta
				else
					puts "Carrying this item would make your load too heavy".red
				end
			else
				puts "That item is not in here, or can't be taken.".red
			end
		else
			puts "Please specify an item to take.".red
		end
	when "look"
		if input[1]
			item = input[1]
			if inventory.has_key? item.to_sym
				item = input[1]
				puts inventory[item.to_sym].examine
			else
				$current_room.look_item item
			end
		else
			$current_room.look
		end
    when "examine", "exam"
    	error = "Please specify an item in your inventory to examine".red
    	if input[1]
	    	item = inventory[input[1].to_sym]
			puts (item ? item.examine : error)
		else
			puts error
		end
	when "n", "s", "e", "w", "ne", "nw", "sw", "se", "d", "u"
		goto_room input[0]
	when "i", "inv", "inventory"
		inventory.each { |k, v|
			puts v.name
		}
	when "easter"
		if input[1] == "egg"
			puts "bonjour! OÃ¹ sont vos pantalons? J'aime la vie. la vie est un plaisir. tout comme ce match. PS4 est mieux que la Xbox un. i luv jeux. paix broseph.".magenta
		end
	when "drop"
		if input[1]
			item = input[1]
			weight -= inventory[item.to_sym].weight
			$current_room.add_item item, inventory[item.to_sym]
			inventory.delete item.to_sym
		else
			puts "Please specify an item in your inventory to drop.".red
		end
	when "put"
		if input[1] && input[3]
			item_1 = input[1]
			in_item = input[3]
			stat = inventory[item_1.to_sym].put inventory[in_item.to_sym]
			inventory.delete item_1.to_sym if stat # not working but i may have fixed idk
		else
			puts "Please specify an item to put in another item."
		end
	when "eat"
		item = inventory[input[1].to_sym]

		item.eat

		
	when "help"
		puts "Some basic commands to get you started: n, e, s, w, ne, nw, se, sw".magenta
		puts "Those are directions if you didn't understand what any of dat means.".magenta
		puts "Many commands can be abbreviated or used by typing their first letter.".magenta
	when "quit"
		exit
	when "shoot"
		# this will be used when they pick up a gun, to shoot the bear
	when "test"
		p find_item input
	else
		puts "Unkown command" unless input.empty?
	end
end
